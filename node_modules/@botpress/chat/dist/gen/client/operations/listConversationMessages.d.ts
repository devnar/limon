export interface ListConversationMessagesRequestHeaders {
    "x-user-key": string;
}
export interface ListConversationMessagesRequestQuery {
    nextToken?: string;
}
export interface ListConversationMessagesRequestParams {
    id: string;
}
export interface ListConversationMessagesRequestBody {
}
export type ListConversationMessagesInput = ListConversationMessagesRequestBody & ListConversationMessagesRequestHeaders & ListConversationMessagesRequestQuery & ListConversationMessagesRequestParams;
export type ListConversationMessagesRequest = {
    headers: ListConversationMessagesRequestHeaders;
    query: ListConversationMessagesRequestQuery;
    params: ListConversationMessagesRequestParams;
    body: ListConversationMessagesRequestBody;
};
export declare const parseReq: (input: ListConversationMessagesInput) => ListConversationMessagesRequest & {
    path: string;
};
export interface ListConversationMessagesResponse {
    messages: {
        /**
         * Identifier of the [Message](#schema_message)
         */
        id: string;
        /**
         * Creation date of the [Message](#schema_message) in ISO 8601 format
         */
        createdAt: string;
        /**
         * Payload is the content type of the message.
         */
        payload: {
            audioUrl: string;
            type: "audio";
        } | {
            title: string;
            subtitle?: string;
            imageUrl?: string;
            actions: {
                action: "postback" | "url" | "say";
                label: string;
                value: string;
            }[];
            type: "card";
        } | {
            items: {
                title: string;
                subtitle?: string;
                imageUrl?: string;
                actions: {
                    action: "postback" | "url" | "say";
                    label: string;
                    value: string;
                }[];
            }[];
            type: "carousel";
        } | {
            text: string;
            options: {
                label: string;
                value: string;
            }[];
            type: "choice";
        } | {
            text: string;
            options: {
                label: string;
                value: string;
            }[];
            type: "dropdown";
        } | {
            fileUrl: string;
            title?: string;
            type: "file";
        } | {
            imageUrl: string;
            type: "image";
        } | {
            latitude: number;
            longitude: number;
            address?: string;
            title?: string;
            type: "location";
        } | {
            markdown: string;
            type: "markdown";
        } | {
            text: string;
            type: "text";
        } | {
            videoUrl: string;
            type: "video";
        };
        /**
         * ID of the [User](#schema_user)
         */
        userId: string;
        /**
         * ID of the [Conversation](#schema_conversation)
         */
        conversationId: string;
    }[];
    meta: {
        /**
         * The token to use to retrieve the next page of results, passed as a query string parameter (value should be URL-encoded) to this API endpoint.
         */
        nextToken?: string;
    };
}
