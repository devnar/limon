export interface CreateMessageRequestHeaders {
    "x-user-key": string;
}
export interface CreateMessageRequestQuery {
}
export interface CreateMessageRequestParams {
}
export interface CreateMessageRequestBody {
    /**
     * Payload is the content type of the message.
     */
    payload: {
        audioUrl: string;
        type: "audio";
    } | {
        title: string;
        subtitle?: string;
        imageUrl?: string;
        actions: {
            action: "postback" | "url" | "say";
            label: string;
            value: string;
        }[];
        type: "card";
    } | {
        items: {
            title: string;
            subtitle?: string;
            imageUrl?: string;
            actions: {
                action: "postback" | "url" | "say";
                label: string;
                value: string;
            }[];
        }[];
        type: "carousel";
    } | {
        text: string;
        options: {
            label: string;
            value: string;
        }[];
        type: "choice";
    } | {
        text: string;
        options: {
            label: string;
            value: string;
        }[];
        type: "dropdown";
    } | {
        fileUrl: string;
        title?: string;
        type: "file";
    } | {
        imageUrl: string;
        type: "image";
    } | {
        latitude: number;
        longitude: number;
        address?: string;
        title?: string;
        type: "location";
    } | {
        markdown: string;
        type: "markdown";
    } | {
        text: string;
        type: "text";
    } | {
        videoUrl: string;
        type: "video";
    };
    /**
     * ID of the [Conversation](#schema_conversation)
     */
    conversationId: string;
}
export type CreateMessageInput = CreateMessageRequestBody & CreateMessageRequestHeaders & CreateMessageRequestQuery & CreateMessageRequestParams;
export type CreateMessageRequest = {
    headers: CreateMessageRequestHeaders;
    query: CreateMessageRequestQuery;
    params: CreateMessageRequestParams;
    body: CreateMessageRequestBody;
};
export declare const parseReq: (input: CreateMessageInput) => CreateMessageRequest & {
    path: string;
};
export interface CreateMessageResponse {
    /**
     * The Message object represents a message in a [Conversation](#schema_conversation) for a specific [User](#schema_user).
     */
    message: {
        /**
         * Identifier of the [Message](#schema_message)
         */
        id: string;
        /**
         * Creation date of the [Message](#schema_message) in ISO 8601 format
         */
        createdAt: string;
        /**
         * Payload is the content type of the message.
         */
        payload: {
            audioUrl: string;
            type: "audio";
        } | {
            title: string;
            subtitle?: string;
            imageUrl?: string;
            actions: {
                action: "postback" | "url" | "say";
                label: string;
                value: string;
            }[];
            type: "card";
        } | {
            items: {
                title: string;
                subtitle?: string;
                imageUrl?: string;
                actions: {
                    action: "postback" | "url" | "say";
                    label: string;
                    value: string;
                }[];
            }[];
            type: "carousel";
        } | {
            text: string;
            options: {
                label: string;
                value: string;
            }[];
            type: "choice";
        } | {
            text: string;
            options: {
                label: string;
                value: string;
            }[];
            type: "dropdown";
        } | {
            fileUrl: string;
            title?: string;
            type: "file";
        } | {
            imageUrl: string;
            type: "image";
        } | {
            latitude: number;
            longitude: number;
            address?: string;
            title?: string;
            type: "location";
        } | {
            markdown: string;
            type: "markdown";
        } | {
            text: string;
            type: "text";
        } | {
            videoUrl: string;
            type: "video";
        };
        /**
         * ID of the [User](#schema_user)
         */
        userId: string;
        /**
         * ID of the [Conversation](#schema_conversation)
         */
        conversationId: string;
    };
}
