import { EventEmitter } from './event-emitter';
import { EventSourceEmitter } from './eventsource';
import { Types } from './gen/signals';
type Signals = Types & {
    unknown: {
        type: 'unknown';
        data: unknown;
    };
};
type SignalMap = {
    [K in keyof Signals as Signals[K]['type']]: Signals[K]['data'];
};
type SignalListenerState = {
    status: 'disconnected';
} | {
    status: 'connecting';
    connectionPromise: Promise<EventSourceEmitter>;
} | {
    status: 'connected';
    source: EventSourceEmitter;
};
export type Events = SignalMap & {
    error: Error;
};
export type SignalListenerStatus = SignalListenerState['status'];
export type SignalListenerProps = {
    url: string;
    userKey: string;
    conversationId: string;
};
export declare class SignalListener extends EventEmitter<Events> {
    private _props;
    private _state;
    private constructor();
    static listen: (props: SignalListenerProps) => Promise<SignalListener>;
    get status(): SignalListenerStatus;
    readonly connect: () => Promise<void>;
    readonly disconnect: () => Promise<void>;
    private _connect;
    private _disconnectSync;
    private _handleMessage;
    private _handleError;
    private _parseSignal;
    private _safeJsonParse;
    private _toError;
}
export {};
